# workflow 名称
name: image-mirror

# 当新建 issues 时，触发
on:
  issues:
    types:
      - opened
      - reopened
      - edited

# 需要执行的任务列表
jobs:
  # 镜像转换任务
  sync_to_target_registry:
    # 运行环境
    runs-on: ubuntu-22.04
    concurrency:
      group: ${{ github.workflow }}-${{ github.actor }}
      cancel-in-progress: true
    # 镜像转换任务的步骤列表
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Check issue body for image format
        id: check_body
        run: |
          python .github/scripts/check_image_format.py "${{ github.event.issue.body }}"

      - name: Add comment if body is not image format
        if: steps.check_body.outputs.is_image_format == 'false'
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            @${{ github.event.issue.user.login }}
            !!!请使用标准镜像格式
            1. 镜像要带tag,如nginx,请写为nginx:latest --arch=linux/amd64,linux/arm64/v8
            2. 标题不重要,issue描述部分,每行一个镜像不要有其他内容,你可以直接更新你的issue
            3. 不带--arch参数默认同步所有架构镜像
          reactions: hooray
          edit-mode: replace

      - name: Update issue title with image summary
        if: steps.check_body.outputs.is_image_format == 'true'
        uses: actions/github-script@v5
        with:
          script: |
            const issue_number = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const body = context.payload.issue.body;
            const lines = body.split(/\r?\n/).map(line => line.trim().replace(/\s--arch.*/, '')).filter(Boolean);
            const images = lines.slice(1);
            const top3 = images.slice(0, 3).join(' | ');
            const total = images.length;
            const newTitle = `${top3}  (共 ${total} 个镜像)`;
            await github.rest.issues.update({
              owner,
              repo,
              issue_number,
              title: newTitle
            });

      - name: Add image-mirror label if body is image format
        if: steps.check_body.outputs.is_image_format == 'true'
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: 'image-mirror'

      - name: Create comment
        if: ${{ steps.check_body.outputs.is_image_format == 'true' && steps.fc.outputs.comment-id == '' }}
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            Syncing image to TargetRegistry, please wait a moment
            [Check the progress](https://github.com/${{ github.repository_owner }}/image-mirror/actions/runs/${{ github.run_id }})
          reactions: rocket

      - name: prepare
        if: steps.check_body.outputs.is_image_format == 'true'
        run: |
          wget -q https://github.com/AliyunContainerService/image-syncer/releases/download/v1.5.4/image-syncer-v1.5.4-linux-amd64.tar.gz
          tar zxf image-syncer-v1.5.4-linux-amd64.tar.gz
          sudo apt install dos2unix

      - name: start sync
        if: steps.check_body.outputs.is_image_format == 'true'
        id: syncImage
        env:
          TARGET_REGISTRY_PASSWORD: ${{ secrets.TARGET_REGISTRY_PASSWORD }}
          TARGET_REGISTRY_USER: ${{ vars.TARGET_REGISTRY_USER }}
          TARGET_NAMESPACE: ${{ vars.TARGET_NAMESPACE }}
          TARGET_REGISTRY: ${{ vars.TARGET_REGISTRY }}
        run: |
          # 将原始 issue body 写入文件，用于后续处理和评论
          echo "${{ github.event.issue.body }}" > images-original-for-comment.yml
          cp images-original-for-comment.yml images-to-process.yml
          dos2unix images-to-process.yml

          # 检查 issue body 中是否存在 --arch 参数
          ARCH_INFO="all"
          SYNC_COMMAND="./image-syncer --auth=./auth.yml --images=./images.yml"

          # 从第二行开始，查找第一个--arch标志
          ARCH_LINE=$(grep -m 1 -- '--arch' <(tail -n +2 images-to-process.yml) || echo "")

          if [[ -n "$ARCH_LINE" ]]; then
            # 如果找到，提取架构值
            ARCH_VALUE=$(echo "$ARCH_LINE" | awk -F'--arch' '{print $2}' | xargs)
            if [[ -n "$ARCH_VALUE" ]]; then
                ARCH_INFO="$ARCH_VALUE"
                SYNC_COMMAND="./image-syncer --auth=./auth.yml --images=./images.yml --arch=\"$ARCH_INFO\""
                echo "Architecture specified: $ARCH_INFO. This will be applied to ALL images in this issue."
            else
                echo "Found '--arch' flag but with no value. Syncing all available architectures."
            fi
          else
            echo "No architecture specified. Syncing all available architectures."
          fi

          # 清理 images-to-process.yml 文件，移除 --arch 及其后的所有内容，为生成镜像列表做准备
          sed -i 's/--arch.*//g'      images-to-process.yml
          sed -i 's/^[ \t]*//g'       images-to-process.yml
          sed -i 's/[ \t]*$//g'       images-to-process.yml
          sed -i '/^[[:space:]]*$/d'  images-to-process.yml

          # 从清理后的文件中提取镜像列表（跳过第一行），并生成 images.yml 和 dockerhub-image.yml
          img=$(tail -n +2 images-to-process.yml)
          for i in ${img[@]}; do
            if [ -z "$i" ]; then continue; fi
            tagName=$(echo $i | awk -F "/" '{print $NF}')
            echo "$i: ${TARGET_REGISTRY}/${TARGET_NAMESPACE}/${tagName}" >> images.yml
            echo "${TARGET_REGISTRY}/${TARGET_NAMESPACE}/${tagName}" >> dockerhub-image.yml
          done

          if [ ! -s images.yml ]; then
            echo "::error::No valid image names found after processing. Aborting sync."
            exit 1
          fi

          echo "--- images.yml content ---"
          cat images.yml
          echo "--- Running command: $SYNC_COMMAND ---"

          # 执行同步命令
          eval $SYNC_COMMAND

          # 设置输出，供后续步骤使用
          echo "::set-output name=arch_synced::$ARCH_INFO"

      - name: Add Success Label and Close Issue
        if: ${{ success() && steps.check_body.outputs.is_image_format == 'true' }}
        uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // 添加 succeed 标签
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['succeed']
            });
            // 关闭 issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed'
            });

      - id: get-comment-body
        if: steps.check_body.outputs.is_image_format == 'true'
        run: |
          dockerhubImage="$(cat dockerhub-image.yml)"
          dockerhubImage="${dockerhubImage//'%'/'%25'}"
          dockerhubImage="${dockerhubImage//$'\n'/'%0A'}"
          dockerhubImage="${dockerhubImage//$'\r'/'%0D'}"
          echo "::set-output name=dockerhubImage::$dockerhubImage"

          # 使用原始的 issue body 内容（包含--arch）来生成评论
          sourceImage="$(cat images-original-for-comment.yml)"
          sourceImage="${sourceImage//'%'/'%25'}"
          sourceImage="${sourceImage//$'\n'/'%0A'}"
          sourceImage="${sourceImage//$'\r'/'%0D'}"
          echo "::set-output name=sourceImage::$sourceImage"

      - name: Find Comment
        if: steps.check_body.outputs.is_image_format == 'true'
        uses: peter-evans/find-comment@v2
        id: fc
        with:
          issue-number: ${{ github.event.issue.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Syncing image to TargetRegistry

      - name: Add Tips
        if: ${{ success() && steps.check_body.outputs.is_image_format == 'true' }}
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            [Check the progress](https://github.com/${{ github.repository_owner }}/image-mirror/actions/runs/${{ github.run_id }})
            **Synced Architectures:** `${{ steps.syncImage.outputs.arch_synced }}`
            ## 镜像信息如下
            - **目标镜像 (Target Images)**
            ```shell
            ${{ steps.get-comment-body.outputs.dockerhubImage }}
            ```
            - **源镜像 (Source from Issue)**
            ```shell
            ${{ steps.get-comment-body.outputs.sourceImage }}
            ```
          reactions: hooray
          edit-mode: replace

      - name: Add failure hint comment
        if: failure() && steps.check_body.outputs.is_image_format == 'true'
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ❌ 镜像同步失败，请检查以下几点：
            - 源镜像是否拼写错误？
            - tag 是否存在（如 `latest`、`1.21`）？
            - 该镜像是否为公开可拉取的镜像？
            - 若指定架构 (`--arch`)，语法是否正确？ (例如 `--arch linux/amd64,linux/arm64`)
            - 若为私有镜像，请确认目标 registry 有访问权限

            可参考 logs：
            [查看工作详情](https://github.com/${{ github.repository_owner }}/image-mirror/actions/runs/${{ github.run_id }})
          reactions: confused

      - name: Add Failed Label
        if: failure() && steps.check_body.outputs.is_image_format == 'true'
        uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['failed']
            });
