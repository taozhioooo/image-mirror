# workflow 名称
name: image-mirror

# 当新建或编辑 issues 时触发
on:
  issues:
    types:
      - opened
      - reopened
      - edited

# 需要执行的任务列表
jobs:
  # 镜像同步任务
  sync_to_target_registry:
    # 运行环境
    runs-on: ubuntu-22.04
    # 更精确的并发控制，确保同一 issue 的任务不会并发执行
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.issue.number }}
      cancel-in-progress: true
    # 镜像转换任务的步骤列表
    steps:
      - name: 1. Checkout code
        uses: actions/checkout@v4

      # 将所有文本处理和验证逻辑整合到一个步骤中
      - name: 2. Validate and Parse Issue Body
        id: parse_issue
        run: |
          # 从 issue body 的第二行开始读取，并清理空行和回车符
          SOURCE_IMAGES=$(echo "${{ github.event.issue.body }}" | tr -d '\r' | sed '/^$/d')

          # 简单的格式验证，检查每行是否包含 ":"
          IS_VALID='true'
          echo "$SOURCE_IMAGES" | while IFS= read -r line; do
            if [[ ! "$line" =~ .*:.* ]]; then
              IS_VALID='false'
              break
            fi
          done
          echo "is_image_format=$IS_VALID" >> $GITHUB_OUTPUT

          if [[ "$IS_VALID" == "true" ]]; then
            # 生成新的 issue 标题
            IMAGES_ARRAY=($SOURCE_IMAGES)
            TOP3=$(echo "$SOURCE_IMAGES" | head -n 3 | paste -sd ' | ' -)
            TOTAL=${#IMAGES_ARRAY[@]}
            NEW_TITLE="$TOP3 (共 ${TOTAL} 个镜像)"
            echo "new_title<<EOF" >> $GITHUB_OUTPUT
            echo "$NEW_TITLE" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

            # 直接生成 syncer 配置文件和最终评论所需的文件
            rm -f images.yml dockerhub-image.yml images-init.yml
            echo "$SOURCE_IMAGES" > images-init.yml

            echo "$SOURCE_IMAGES" | while IFS= read -r i; do
                tagName=$(echo "$i" | awk -F "/" '{print $NF}')
                echo "$i: ${{ vars.TARGET_REGISTRY }}/${{ vars.TARGET_NAMESPACE }}/${tagName}" >> images.yml
                echo "${{ vars.TARGET_REGISTRY }}/${{ vars.TARGET_NAMESPACE }}/${tagName}" >> dockerhub-image.yml
            done
          fi

      # 如果格式错误，立即评论并终止
      - name: Handle Invalid Format
        if: steps.parse_issue.outputs.is_image_format == 'false'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            @${{ github.event.issue.user.login }}
            !!! 请使用标准镜像格式
            1. 镜像必须带 tag，例如 `nginx:latest`
            2. issue 描述中，首行为标题（可忽略），后续每行一个镜像，不要包含其他内容。
            您可以直接编辑更新此 issue。
          reactions: confused

      # 格式正确时，更新标题和标签，并发布“进行中”评论
      - name: Update Issue and Post Initial Comment
        if: steps.parse_issue.outputs.is_image_format == 'true'
        id: progress_comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ⏳ **同步进行中...**
            镜像列表已解析，正在准备同步。
            [点击查看实时进度](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          reactions: rocket
          
      - name: Update Issue Title and Labels
        if: steps.parse_issue.outputs.is_image_format == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // 更新标题
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              title: `${{ steps.parse_issue.outputs.new_title }}`
            });
            // 添加标签
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['image-mirror']
            });

      # 缓存 image-syncer
      - name: Cache image-syncer
        if: steps.parse_issue.outputs.is_image_format == 'true'
        id: cache-syncer
        uses: actions/cache@v4
        with:
          path: ./image-syncer
          key: ${{ runner.os }}-image-syncer-v1.5.5

      - name: Download image-syncer
        if: steps.cache-syncer.outputs.cache-hit != 'true' && steps.parse_issue.outputs.is_image_format == 'true'
        run: |
          wget -q https://github.com/AliyunContainerService/image-syncer/releases/download/v1.5.5/image-syncer-v1.5.5-linux-amd64.tar.gz
          tar zxf image-syncer-v1.5.5-linux-amd64.tar.gz

      # 执行同步
      - name: 3. Start Sync
        if: steps.parse_issue.outputs.is_image_format == 'true'
        env:
          TARGET_REGISTRY_PASSWORD: ${{ secrets.TARGET_REGISTRY_PASSWORD }}
          TARGET_REGISTRY_USER: ${{ vars.TARGET_REGISTRY_USER }}
          TARGET_NAMESPACE: ${{ vars.TARGET_NAMESPACE }}
          TARGET_REGISTRY: ${{ vars.TARGET_REGISTRY }}
        run: |
          echo "--- Images to Sync ---"
          cat images.yml
          echo "----------------------"
          ./image-syncer --auth=./auth.yml --images=./images.yml

      # 成功后，更新最终评论
      - name: Handle Success Comment
        if: success() && steps.parse_issue.outputs.is_image_format == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.progress_comment.outputs.comment-id }}
          edit-mode: replace
          body: |
            ✅ **镜像同步成功**
            所有镜像已成功同步，此 issue 将被自动关闭。
            [点击查看执行日志](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            #### 源镜像
            ```yaml
            ${{ steps.parse_issue.outputs.source_images_for_comment }}
            ```

            #### 目标镜像
            ```yaml
            ${{ steps.parse_issue.outputs.target_images_for_comment }}
            ```
          reactions: hooray

      - name: Add 'succeed' Label and Close Issue
        if: success() && steps.parse_issue.outputs.is_image_format == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // 添加 'succeed' 标签
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number,
              labels: ['succeed']
            });

            // 关闭 issue
            await github.rest.issues.update({
              owner,
              repo,
              issue_number,
              state: 'closed'
            });

      # 失败后，更新评论
      - name: Handle Failure
        if: failure() && steps.parse_issue.outputs.is_image_format == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.progress_comment.outputs.comment-id }}
          edit-mode: replace
          body: |
            ❌ **镜像同步失败**
            请检查以下几点：
            - 源镜像名称或 tag 是否拼写错误？
            - 镜像是否为公开可拉取？
            - 若为私有镜像，请确认目标 registry 拥有访问权限。

            [点击查看失败日志详情](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          reactions: confused
